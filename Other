

        private static string T( ConsoleModifiers ms )
        {
            // Control and shift shows up but the others dont
            // multiple control and shift cant be pressed at the same time
            var s = "";
            if ( (ms & ConsoleModifiers.Alt) != 0 )
            {
                s += " alt ";
            }
            if ( (ms & ConsoleModifiers.Control) != 0 )
            {
                s += " control ";
            }
            if ( (ms & ConsoleModifiers.Shift) != 0 )
            {
                s += " shift ";
            }
            return s;
        }

        public static void Main()
        {
            var MaxY = Console.WindowHeight - 1; 
            var MaxX = Console.WindowWidth - 1;

            Console.CursorVisible = false;

            var c = '\0';
            var middleX = (int)(MaxX / 2);
            var middleY = (int)(MaxY / 2);
            var m = new Loc( middleX, middleY );

            var dist = 3;
            var directions = new [] { Direction.North
                                    , Direction.NorthEast
                                    , Direction.East
                                    , Direction.SouthEast
                                    , Direction.South
                                    , Direction.SouthWest
                                    , Direction.West
                                    , Direction.NorthWest
                                    };
            var directionIndex = 0;
            
            while ( c != 'q' )
            {
                var g = new Grid<int>( MaxY, MaxX, 0 );

                var line = g.Line( m, directions[directionIndex], new Distance( dist ), 1 ).ToList();

                MyClear(ConsoleColor.Black);

                foreach( var (row, col, val) in line )
                {
                    DrawLetter( ' ', col, row, ConsoleColor.White, ConsoleColor.White );
                }
                DrawLetter( 'X', middleX, middleY, ConsoleColor.Red, ConsoleColor.Blue );
                Console.ForegroundColor = ConsoleColor.Black;
                Console.BackgroundColor = ConsoleColor.White;

                var v = Console.ReadKey(true);
                c = v.KeyChar;

                switch( c )
                {
                    case 'h':
                        if ( directionIndex >= directions.Length -1 )
                        {
                            directionIndex = 0;
                        }
                        else
                        {
                            directionIndex++;
                        }
                        break;
                    case 'd':
                        dist++;
                        break;
                    case 'f':
                        dist--;
                        break;
                    case 'l':
                        break;
                }
            }
        }

    public class WorldEntity
    {
        public int Id;
        public char Display;
        public int X;
        public int Y;
        public int XMod;
        public int YMod;
        // TODO add color

        public WorldEntity( int id, char display, int x, int y )
        {
            Id = id;
            Display = display;
            X = x;
            Y = y;
            XMod = 0;
            YMod = 0;
        }
    }

    public class World // TODO world screen view
    {
        public Dictionary<int, WorldEntity> _es = new Dictionary<int, WorldEntity>(); 
        public WorldEntity _hero;

        private int MaxY;
        private int MaxX;

        public World()
        {
            MaxY = Console.WindowHeight - 1; // TODO this changes and cant be static like this
            MaxX = Console.WindowWidth - 1;
        }

        public void AddEntity( int id, char c, int x, int y )
        {
            _es.Add( id, new WorldEntity(id, c, x, y) );
        }

        public void AddHero( char c, int x, int y )
        {
            _hero = new WorldEntity( 0, c, x, y );
        }

        public (int, int) HeroDrawPosition() 
        {
            return (_hero.X + _hero.XMod, _hero.Y + _hero.YMod);
        }

        public void Move( IEnumerable<(int id, IEnumerable<WorldMove> moves)> ms )
        {
                        
        }

        public void MoveUp( int id ) // TODO instead of move up down etc have move sequences for an id
        {                            // Will then need some sort of sleep loop to execute the sequence in
            var entity = _es[id];
            entity.Y--;
        }

        public void MoveDown( int id )
        {
            var entity = _es[id];
            entity.Y++;
        }

        public void MoveLeft( int id )
        {
            var entity = _es[id];
            entity.X--;
        }

        public void MoveRight( int id )
        {
            var entity = _es[id];
            entity.X++;
        }

        public void HeroMoveUp( )
        {
            if ( _hero.Y + _hero.YMod == 0 )
            {
                _hero.YMod++;
                RelativeHeroMoveUp();
            }
            _hero.Y--; 
        }

        public void HeroMoveDown(  )
        {
            if ( _hero.Y + _hero.YMod == MaxY )
            {
                _hero.YMod--;
                RelativeHeroMoveDown();
            }
           _hero.Y++; 
        }

        public void HeroMoveLeft(  )
        {
            if ( _hero.X + _hero.XMod == 0 )
            {
                _hero.XMod++;
                RelativeHeroMoveLeft();
            }
            _hero.X--;
        }

        public void HeroMoveRight( )
        {
            if ( _hero.X + _hero.XMod == MaxX )
            {
                _hero.XMod--;
                RelativeHeroMoveRight();
            }
            _hero.X++;
        }
        
        private void RelativeHeroMoveUp()
        {
            foreach( var e in _es )
            {
                e.Value.YMod++;
            }
        }

        private void RelativeHeroMoveDown()
        {
            foreach( var e in _es )
            {
                e.Value.YMod--;
            }
        }

        private void RelativeHeroMoveRight()
        {
            foreach( var e in _es )
            {
                e.Value.XMod--;
            }
        }

        private void RelativeHeroMoveLeft()
        {
            foreach( var e in _es )
            {
                e.Value.XMod++;
            }
        }

    }
